from copy import deepcopy

class NaiveBayes:
    def __init__(self):
        self.label = []
        self.feature = []
        self.ftr_map = {}
        self.label_map = {}

    def get_feature_map(self):
        return deepcopy(self.ftr_map)

    def get_label_map(self):
        return deepcopy(self.label_map)

    def fit(self, feature_list, label_list):
        #insert data into class attribut
        for unit in feature_list:
            self.feature.append(unit)

        for unit in label_list:
            self.label.append(unit)

        #create map for feature data
        for i in range(len(self.feature)):
            for j in range(len(self.feature[i])):
                if j not in self.ftr_map:
                    self.ftr_map[j] ={}
                
                isi = self.feature[i][j]
                label = self.label[i]
                if isi not in self.ftr_map[j]:
                    self.ftr_map[j][isi] = {}

                if label not in self.ftr_map[j][isi]:
                    self.ftr_map[j][isi][label] = 1
                else:
                    self.ftr_map[j][isi][label] += 1


        #create map for label data
        for row in self.label:
            if row in self.label_map:
                self.label_map[row] += 1
            else:
                self.label_map[row] = 1

    def predict(self, feature_unit):
        

nb = NaiveBayes()

data_feature = [
        ["sunny", "hot", "high", "true"],
        ["sunny", "hot", "high", "false"],
        ["overcast", "hot", "high", "false"]
        ]

data_label = [
        "no",
        "no",
        "yes"
        ]

nb.fit(data_feature, data_label)
feature_map = nb.get_feature_map()
label_map = nb.get_label_map()

print(feature_map)
print(label_map)





